pseudo-Boolean proof version 1.2

* load a formula with 10 constraitns
f 10

* define a new order named "simple"
pre_order simple
    vars
        * define "left" variables
        left u1
        * define "right" variables
        * check |left| = |right|
        right v1
        * define auxiliary variables
        * (the list of aux variables is empty)
        aux
    end


    * * encoding of auxiliary variables
    * aux_def
    *    * allowed rules are: reifications, map redundancy limited to
    *    * remaping auxiliary variables, polish notation, does not have
    *    * access to constraints in the database
    * qed

    * define the encoding
    def
        -1 u1 1 v1 >= 0 ;
    end

    * proof goal: transitivity
    transitivity
        vars
            fresh_right w1
            * fresh_aux
            * fresh_aux2
        end
        proof
            * automatically creates constraints in the order:
            *   def
            *       ID 1: -1 u1 1 v1 >= 1 ;
            *   def_aux
            *   def[left->right, right->fresh_right, aux->fresh_aux]
            *       ID 2: -1 v1 1 w1 >= 1 ;
            *   def_aux[left->right, right->fresh_right, aux->fresh_aux]
            *   def_aux[right->fresh_right, aux->fresh_aux2]

            * proof goals are created for:
            *   def[right->fresh_right, aux->fresh_aux2]
            *       ID #1: -1 u1 1 w1 >= 1 ;

            * It follows a sub proof for each proof goal, if an ID is
            * missing the verifier tries to verify it using RUP. The sub
            * proofs must be in the same order as the sub goal IDs. If a
            * proof goal comes from a constraint of the formula it will
            * have the same ID as the constraint, otherwise the ID will
            * be fresh and will not be used for further constraints


            * proof goal: show that proof goal [ID #1] is implied
            proofgoal #1
                * automatically creates \neg [ID #1]
                *   ID 3: 1 u1 -1 v1 >= 0 ;
                * We now need to show contradiction
                p 1 2 + 3 +
                c -1
                * alternatively we could just write
                *   u >= 1;
                * in this case or omit the proof goal completely

            * end of context implicitly deletes all added constraints (5,6)
            qed

        * end of context implicitly deletes all added constraints (3,4)
        * the proof would fail if any of the proof goals is missing or failed at this point
        qed
    qed
end

* Load previously defined order. After the name of the order to load
* (simple) a list of variables (x1) follows that specifies the
* variables the order is over (note that the order of the variables
* matters)
*
* marks all constraints as fixed / non auxiliary
load_order simple x1

* new dominance rule with rho = x1->0
dom 1 ~x1 >= 1 ; x1 0 ; begin
    * automatically creates \neg [~x1 >= 1]
    *   ID 11: x1 >= 1
    * checks if aux are still fresh variables
    * automatically creates constraints
    *   def_aux [ left|->([vars][rho]), right|->vars,aux|->([aux][rho]) ]


    * The following proof goals are added:
    *
    *  - for every constraint C in the database (fixed / non auxiliary) show
    *    C[rho] is implied. No proof goal is introduced for constraints that
    *    are not effected by rho.
    *
    *  - the order is respected by rho
    *       def [ left|->([vars][rho]), right|->vars,aux|->([aux][rho]) ]
    *       [ -1 u1 1 v1 >= 1 ;] [u1->0, v1->x1]
    *       #1: 1 x1 >= 1;

    * show C [rho] is implied
*    proofgoal 1
*        c -1
*    qed

    * show that order is respected
*    proofgoal #1
*        * automatically creates \neg [ID 12]
*        *   ID 13: 1 ~x1 >= 1;
*        p 11 13 +
*        c 14
*
*        * end of context implicitly deletes all added constraints (13,14)
*    qed

    * end of context implicitly deletes all added constraints (11)
    * end of rule adds ID 15: ~x1 >= 1 ;
qed

* redundancy rule introducing fresh variable x2 using rho = [x2 -> ~x1]
red 1 x1 1 x2 >= 1 ; x2 ~x1 ; begin
    * checks that rho does not touch left variables of order simple

    * automatically creates \neg [1 x1 1 x2 >= 1]
    *   ID 16 -1 x1 -1 x2 >= 0 ;

    * The following proof goals are added:
    *
    *  - for every constraint C in the database (fixed and unfixed) show C
    *    [rho] is implied no proof goal is introduced for constraints that
    *    are not effected by rho
    *
    *  - for the constraint to be introduced [1 x1 1 x2 >= 1][rho]
    *        ID #1: >= 0 ;  --- is trivialy satisfied and nothing needs to be proven

    * end of context implicitly deletes all added constraints (16)
    * end of rule adds ID 17: 1 x1 1 x2 >= 1 ;
qed

p 12 14 +
*  ID 18: x2 >= 1 ;

* load the default order (0 >= 1), mark all constraints as fixed
load_order